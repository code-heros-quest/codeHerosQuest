[{"/Users/sararussert/codefellows/401/testSpace/gametest/src/index.js":"1","/Users/sararussert/codefellows/401/testSpace/gametest/src/App.js":"2","/Users/sararussert/codefellows/401/testSpace/gametest/src/screens/GameScreen.js":"3","/Users/sararussert/codefellows/401/testSpace/gametest/src/screens/WelcomeScreen.js":"4","/Users/sararussert/codefellows/401/testSpace/gametest/src/screens/CreateScreen.js":"5","/Users/sararussert/codefellows/401/testSpace/gametest/src/screens/JoinScreen.js":"6","/Users/sararussert/codefellows/401/testSpace/gametest/src/components/connect.js":"7","/Users/sararussert/codefellows/401/testSpace/gametest/src/components/SceneVideo.js":"8","/Users/sararussert/codefellows/401/testSpace/gametest/src/components/Loot.js":"9","/Users/sararussert/codefellows/401/testSpace/gametest/src/components/Chat.js":"10","/Users/sararussert/codefellows/401/testSpace/gametest/src/components/ChooseCharacterButtons.js":"11","/Users/sararussert/codefellows/401/testSpace/gametest/src/components/Dialogue.js":"12","/Users/sararussert/codefellows/401/testSpace/gametest/src/components/GameButtons.js":"13","/Users/sararussert/codefellows/401/testSpace/gametest/src/components/Choice3.js":"14","/Users/sararussert/codefellows/401/testSpace/gametest/src/components/Roll.js":"15","/Users/sararussert/codefellows/401/testSpace/gametest/src/components/Ready.js":"16","/Users/sararussert/codefellows/401/testSpace/gametest/src/components/Choice4.js":"17","/Users/sararussert/codefellows/401/testSpace/gametest/src/components/Riddle.js":"18","/Users/sararussert/codefellows/401/testSpace/gametest/src/components/Luck3.js":"19","/Users/sararussert/codefellows/401/testSpace/gametest/src/components/Start.js":"20","/Users/sararussert/codefellows/401/testSpace/gametest/src/components/Choice2.js":"21","/Users/sararussert/codefellows/401/testSpace/gametest/src/components/Ready2.js":"22","/Users/sararussert/codefellows/401/testSpace/gametest/src/components/Luck.js":"23"},{"size":222,"mtime":1608245884765,"results":"24","hashOfConfig":"25"},{"size":674,"mtime":1608251926335,"results":"26","hashOfConfig":"25"},{"size":2446,"mtime":1608590719633,"results":"27","hashOfConfig":"25"},{"size":1545,"mtime":1608590719646,"results":"28","hashOfConfig":"25"},{"size":7555,"mtime":1608590719542,"results":"29","hashOfConfig":"25"},{"size":7885,"mtime":1608590719634,"results":"30","hashOfConfig":"25"},{"size":201,"mtime":1608493016180,"results":"31","hashOfConfig":"25"},{"size":740,"mtime":1608590719420,"results":"32","hashOfConfig":"25"},{"size":2819,"mtime":1608590719418,"results":"33","hashOfConfig":"25"},{"size":3211,"mtime":1608590719403,"results":"34","hashOfConfig":"25"},{"size":849,"mtime":1608412573834,"results":"35","hashOfConfig":"25"},{"size":1335,"mtime":1608590719406,"results":"36","hashOfConfig":"25"},{"size":1484,"mtime":1608590647839,"results":"37","hashOfConfig":"25"},{"size":905,"mtime":1608590719405,"results":"38","hashOfConfig":"25"},{"size":855,"mtime":1608590719419,"results":"39","hashOfConfig":"25"},{"size":692,"mtime":1608590719418,"results":"40","hashOfConfig":"25"},{"size":1053,"mtime":1608590719405,"results":"41","hashOfConfig":"25"},{"size":1222,"mtime":1608526075847,"results":"42","hashOfConfig":"25"},{"size":1444,"mtime":1608526075845,"results":"43","hashOfConfig":"25"},{"size":732,"mtime":1608526075850,"results":"44","hashOfConfig":"25"},{"size":826,"mtime":1608590719404,"results":"45","hashOfConfig":"25"},{"size":695,"mtime":1608526075846,"results":"46","hashOfConfig":"25"},{"size":1768,"mtime":1608571510123,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1t0zvlz",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"/Users/sararussert/codefellows/401/testSpace/gametest/src/index.js",[],["103","104"],"/Users/sararussert/codefellows/401/testSpace/gametest/src/App.js",[],"/Users/sararussert/codefellows/401/testSpace/gametest/src/screens/GameScreen.js",[],"/Users/sararussert/codefellows/401/testSpace/gametest/src/screens/WelcomeScreen.js",[],"/Users/sararussert/codefellows/401/testSpace/gametest/src/screens/CreateScreen.js",[],"/Users/sararussert/codefellows/401/testSpace/gametest/src/screens/JoinScreen.js",["105"],"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\nimport socket from '../components/connect.js';\nimport client from '../components/connect.js';\nimport ChooseCharacterButton from '../components/ChooseCharacterButtons.js'\n\nconst styleShow = {\n  margin: 'auto',\n  backgroundImage: 'url(./images/scroll.png)',\n  backgroundSize: '100% 100%',\n  borderRadius: '10px',\n  fontSize: '1.7em',\n  color: 'black',\n  display: 'inline-block',\n  width: '935px',\n  minHeight: '610px',\n  height: 'auto',\n  padding: '5px 10px 10px 10px',\n}\nconst styleHide = {\n  display: 'none'\n}\nlet characterPicked = null;\nconst JoinScreen = () => {\n  const [availableCharacters, setAvailableCharacters] = useState([]);\n  //img, name, role\n  const [state, setState] = useState('')\n  const [gameData, setGameData] = useState('');\n  const [charInfo, setCharInfo] = useState({ char: 'hunter', name: 'michael' });\n  const [startTheme, setStartTheme] = useState(styleShow);\n  const [charTheme, setCharTheme] = useState(styleHide);\n  const [gameTheme, setGameTheme] = useState(styleHide);\n  const [nameTheme, setNameTheme] = useState(styleHide);\n  const [startButton, setStartButton] = useState('true');\n  const [buttonText, setButtonText] = useState('Waiting for other players to join...')\n\n  // ------------- Updates joined characters --------------//\n  useEffect(() => {\n    client.on('char array', charArray => {\n      setAvailableCharacters(charArray);\n    })\n  })\n  useEffect(() => {\n    client.on('begin game', () => {\n      setStartButton('');\n      setButtonText('Start Game')\n    })\n    \n  }, [setStartButton, setButtonText])\n\n  // ------------ CHANGE THEMES/ SHOW SELECTED FORMS ------------- //\n\n  const changeTheme = () => {\n    setStartTheme(styleHide);\n    setCharTheme(styleShow);\n  }\n  const showGameLink = () => {\n    setNameTheme(styleHide);\n    setGameTheme(styleShow);\n  }\n  //-------------- CHOSEN CHARACTER FUNCTION ---------- //\n  const chosenCharacter = (e) => {\n    e.preventDefault();\n    setCharInfo({ ...charInfo, [e.target.name]: e.target.alt })\n    if (e.target.alt === 'Hunter') {\n      setCharTheme(styleHide);\n      setNameTheme(styleShow);\n      characterPicked = <img src='./images/Hunter.png' style={{ height: '150px', marginTop: '110px' }} name=\"char\" alt=\"Hunter\" />;\n      client.emit('choose character', 'Hunter')\n      return characterPicked;\n    }\n    if (e.target.alt === 'Assassin') {\n      setCharTheme(styleHide);\n      setNameTheme(styleShow);\n      characterPicked = <img src='./images/Assassin.png' style={{ height: '120px', marginTop: '131px' }} name=\"char\" alt=\"Assassin\" />;\n      client.emit('choose character', 'Assassin')\n      return characterPicked;\n    }\n    if (e.target.alt === 'Wizard') {\n      setCharTheme(styleHide);\n      setNameTheme(styleShow);\n      characterPicked = <img src='./images/Wizard.png' style={{ height: '150px', marginTop: '110px' }} name=\"char\" alt=\"Wizard\" />;\n      client.emit('choose character', 'Wizard')\n      return characterPicked;\n    }\n    if (e.target.alt === 'Warrior') {\n      setCharTheme(styleHide);\n      setNameTheme(styleShow);\n      characterPicked = <img src='./images/Warrior.png' style={{ height: '150px', paddingRight: '10px', marginTop: '110px' }} name=\"char\" alt=\"Warrior\" />;\n      client.emit('choose character', 'Warrior')\n      return characterPicked;\n    }\n    else {\n      return alert('error in character picked function')\n    }\n  }\n  const onTextChange = e => {\n    setState(e.target.value);\n  }\n  const createGameHandler = (e) => {\n    e.preventDefault();\n    socket.emit('join game', state);\n    changeTheme();\n  }\n  const onNameChange = e => {\n    console.log(e.target.name, e.target.char);\n    setCharInfo({ ...charInfo, [e.target.name]: e.target.value })\n    console.log(charInfo.name, charInfo.char);\n  }\n  const submitChar = (e) => {\n    e.preventDefault();\n    console.log(charInfo);\n    socket.emit('start game', charInfo);\n  }\n\n  useEffect(() => {\n    socket.on('choose character', game => {\n      setGameData(game.id);\n    })\n\n    // this is to emit an error if a player enters an invalid game code\n    socket.on('error', message => {\n      console.log(message);\n    })\n  })\n\n  const buttonStyle = {\n    color: 'white',\n    boxShadow: '5px 5px 10px black',\n    backgroundColor: '#595959',\n    borderRadius: '10px',\n    fontSize: '1em',\n    padding: '5px 10px',\n  }\n\n  return (\n    <div style={{ background: 'none', marginTop: '125px', textAlign: 'center' }}>\n      <div style={startTheme}>\n        <Card.Body style={{ marginLeft: '70px', marginTop: '170px', width: '750px' }}>\n          <Card.Title style={{ fontSize: '1.5em', fontWeight: 'bolder', fontFamily: 'cursive' }}>JOIN A NEW GAME</Card.Title>\n          <Form onSubmit={createGameHandler}>\n            <Form.Group>\n              <Form.Label>Enter your game code</Form.Label>\n              <Form.Control style={{ width: '40%', margin: 'auto' }} type=\"text\" placeholder=\"code\" onChange={(e) => onTextChange(e)} />\n            </Form.Group>\n            <button style={buttonStyle} type=\"submit\">\n              Submit\n            </button>\n          </Form>\n        </Card.Body>\n      </div>\n\n      <div style={charTheme}>\n        <Card.Title style={{ fontSize: '1.5em', fontWeight: 'bolder', fontFamily: 'cursive', marginTop: '150px' }}>CHOOSE YOUR CHARACTER</Card.Title>\n        <br></br>\n        <ChooseCharacterButton characters={availableCharacters} chosenCharacter={chosenCharacter} />\n      </div>\n\n      <div style={nameTheme}>\n        <Card.Title style={{ fontSize: '1.5em', fontWeight: 'bolder', fontFamily: 'cursive', marginTop: '190px' }}>What is your Character's Name?</Card.Title>\n        <Card.Title style={{ fontSize: '1.5em', fontWeight: 'bolder', fontFamily: 'cursive', color: 'white' }}>{gameData}</Card.Title>\n        <Form onSubmit={submitChar}>\n          <Form.Control style={{ width: '40%', margin: '50px auto 10px auto' }} type=\"text\" placeholder=\"name\" name=\"name\" onChange={(e) => onNameChange(e)} />\n          <button style={buttonStyle} type=\"submit\" onClick={showGameLink}>Submit</button>\n        </Form>\n      </div>\n      <div style={gameTheme}>\n        <div style={{ margin: '0' }}>{characterPicked}</div>\n        <h3>{charInfo.char}:  {charInfo.name}</h3>\n        <h1 style={{ paddingBottom: '30px', fontSize: '1.5em', fontWeight: 'bolder', fontFamily: 'cursive', marginTop: '30px' }}>Start Your Quest</h1>\n        <Link to='/game'>\n          <button type=\"submit\" style={buttonStyle} disabled={startButton}>{buttonText}</button>\n        </Link>\n      </div>\n\n    </div>\n  )\n}\nexport default JoinScreen\n\n\n\n\n","/Users/sararussert/codefellows/401/testSpace/gametest/src/components/connect.js",[],"/Users/sararussert/codefellows/401/testSpace/gametest/src/components/SceneVideo.js",["106","107","108"],"import React, { useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nconst SceneVideo = (props) => {\n  const [scene, setScene] = useState([{ video: null}]);\n\n  useEffect(() => {\n    setScene([{ video: props.scenario.video }])\n    console.log('updating video in scene vid from props')\n  }, [props.scenario])\n    \n\n  const renderSceneVideo = () => {\n    return scene.map(({ video }, index) => ( \n     <iframe autoPlay src={video} key={index} style={{ width: '100%', minHeight: '500px', height: '30vw', border: 'none'}} autoPlay></iframe>\n    ))\n  }\n\n\n\n  return (\n\n      <div id=\"video-window\" >\n        {renderSceneVideo()}\n      </div>\n\n  )\n}\n\nexport default SceneVideo;","/Users/sararussert/codefellows/401/testSpace/gametest/src/components/Loot.js",["109","110"],"import React, { useState, useEffect } from 'react';\n\n\n\nfunction Loot(props) {\n    const [character, setCharacter] = useState({loot: [], stats: {health: 0, attack: 0}})\n\n    useEffect(() => {\n        setCharacter(props.character)\n        console.log('updating character from props in loot');\n    }, [props.character])\n\n    const styleLoot = {\n        borderRadius: '7px',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n    }\n\n    const styleImg = {\n        height: '80px',\n        width: 'auto'\n    }\n\n    const style={\n        display: 'inline-block',\n        color: 'white',\n        paddingRight: '15px'\n    }\n\n    return (\n        <div id='loot-container' style={{ display: 'inline-block', float: 'right' }}>\n            <h1 style={{color: 'white', fontSize: '1.4em', fontFamily: 'cursive', textDecoration: 'underline lightgray'}}>{character.name}</h1>\n            <div >\n            <h5 style={style}>Health:</h5>\n            <meter min=\"0\" low={character.lowHealth} optimum={character.maxHealth} high={character.highHealth} max={character.maxHealth} value={character.stats.health} />\n            </div>\n            <div>\n            <h5 style={style}>Attack:</h5>\n            <meter min=\"0\" low=\"9\" optimum=\"23\" high=\"17\" max=\"27\" value={character.stats.attack} />\n            </div>\n            <h5 style={style}>Loot:</h5>\n            <ul>\n                {character.loot.map(item =>\n                <li style={style} key={item.name}>{item.name}</li>\n            )}\n            </ul>\n\n            {/* <section style={{ backgroundImage: 'url(./images/Loot.png)', backgroundSize: '100% 100%', padding: '2px 20px 2px 20px', height: '500px', width: '250px', margin: 'auto', backgroundRepeat: 'no-repeat', borderRadius: '7px', display: 'grid', gridTemplateColumns: '1fr 1fr', gridTemplateRows: '1fr 1fr 1fr 1fr', border: '1px solid black', backgroundColor: 'gray' }}>\n                <div style={styleLoot}><img style={styleImg} src='./images/icons/axe.png'></img></div>\n                <div style={styleLoot}><img style={styleImg} src='./images/icons/book.png'></img></div>\n                <div style={styleLoot}><img style={styleImg} src='./images/icons/gold.png'></img></div>\n                <div style={styleLoot}><img style={styleImg} src='./images/icons/potion.png'></img></div>\n                <div style={styleLoot}><img style={styleImg} src='./images/icons/sword.png'></img></div>\n                <div style={styleLoot}><img style={styleImg} src='./images/icons/dagger.png'></img></div>\n                <div style={styleLoot}><img style={styleImg} src='./images/icons/club.png'></img></div>\n                <div style={styleLoot}><img style={styleImg} src='./images/icons/bow.png'></img></div>\n            </section> */}\n        </div>\n    )\n}\n\nexport default Loot;\n\n\n","/Users/sararussert/codefellows/401/testSpace/gametest/src/components/Chat.js",["111"],"import React, { useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Form from 'react-bootstrap/Form'\nimport client from './connect.js';\nimport './Scroll.css'\n\nlet chatArr = []\n\nconst Chat = (props) => {\n  const [character, setCharacter] = useState({});\n  const [state, setState] = useState({ message: '', name: '' });\n  const [chat, setChat] = useState([]);\n  useEffect(() => {\n    setCharacter(props.character)\n    console.log('setting chat character from props')\n  }, [props.character])\n  useEffect(() => {\n    setState({ name: character.name })\n    console.log('setting chat name state')\n  }, [character])\n  useEffect(() => {\n    client.on('chat', ({ name, message }) => {\n      chatArr.unshift({ name, message })\n      setChat(chatArr.slice(0))\n      //setChat([...chat, { name, message }])\n      console.log('setting chat')\n    })\n\n  }, [setChat])\n  const onTextChange = e => {\n    setState({ ...state, [e.target.name]: e.target.value })\n  }\n  const onMessageSubmit = (e) => {\n    e.preventDefault();\n    const { message, name } = state;\n    console.log(name, message);\n    client.emit('chat', { name, message });\n    setState({ message: '', name });\n    let doc = document.getElementById('message');\n    doc.value = '';\n  }\n  const renderChat = () => {\n    return chat.map(({ name, message }, index) => (\n      <div key={index}>\n        <h3 style={{ fontSize: '1.6em' }}>\n          <strong>{name}:</strong> <span>{message}</span>\n        </h3>\n        <p style={{ fontSize: '10px' }}>_____________________________________</p>\n      </div>\n    ))\n  }\n  return (\n    <div id=\"mario-chat\" style={{ backgroundImage: 'url(./images/scrolly.png)', backgroundAttachment: 'scroll', backgroundRepeat: 'no-repeat', backgroundSize: 'cover', width: '550px', marginRight: '0' }} >\n      <h2 style={{ fontSize: '2em', width: '300px', paddingLeft: '35px', paddingTop: '100px', margin: 'auto', textDecoration: 'underline', fontFamily: 'fantasy' }}><strong>Kingdom chat</strong></h2>\n      <div id=\"chat-window\" className='scrollChat'>\n        {renderChat()}\n      </div>\n      <Form onSubmit={onMessageSubmit}>\n        {/* <Form.Label style={{ fontSize: '1.4em', paddingLeft: '50px'}}><strong>Player Name:</strong></Form.Label>\n        <input style={{backgroundColor: 'rgba(199, 199, 199, 0)', borderRadius: '7px', fontSize: '1.4em', marginLeft: '5px'}} size=\"lg\" id=\"name\" name=\"name\" type=\"text\" placeholder=\"Name...\" onChange={(e) => onTextChange(e)}/>\n        <p /> */}\n        <Form.Label style={{ fontSize: '1.4em', paddingLeft: '50px' }}><strong>Type Message:</strong></Form.Label>\n        <input style={{ backgroundColor: 'rgba(199, 199, 199, 0)', borderRadius: '7px', fontSize: '1.4em', marginLeft: '5px', marginBottom: '15px' }} id=\"message\" name=\"message\" type=\"text\" placeholder=\"Message...\" onChange={(e) => onTextChange(e)} />\n        <p />\n        <button id=\"send\" type=\"submit\" style={{ color: 'white', boxShadow: '5px 5px 10px black', backgroundColor: '#595959', marginLeft: '45%', padding: '10px 15px', marginBottom: '35px', borderRadius: '10px' }}>Send</button>\n      </Form>\n      <p />\n    </div>\n  )\n}\nexport default Chat;","/Users/sararussert/codefellows/401/testSpace/gametest/src/components/ChooseCharacterButtons.js",["112"],"import React, { useState, useEffect } from 'react';\nimport client from './connect.js';\nimport './Buttons.css';\n\nconst ChooseCharacterButton = (props) => {\n  const [characters, setCharacters] = useState([]);\n\n  useEffect(() => {\n    setCharacters(props.characters);\n\n  }, [props])\n\n\n  const choseCharacter = (e) => {\n    e.preventDefault();\n    props.chosenCharacter(e)\n  }\n\n  return (\n    <div>\n      {characters.map((character, index) => (\n        <button style={{ cursor: 'pointer', backgroundColor: 'transparent', border: 'none', marginRight: '30px' }} onClick={choseCharacter} key={character.role}>\n          <img src={character.img} style={{ height: '150px' }} name=\"char\" alt={character.role} />\n          <p style={{ cursor: 'no-drop' }}>{character.role}</p>\n        </button>\n      ))}\n    </div>\n  )\n}\n\nexport default ChooseCharacterButton ","/Users/sararussert/codefellows/401/testSpace/gametest/src/components/Dialogue.js",["113"],"import React, { useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './Scroll.css';\n\n\n\nconst Dialogue = (props) => {\n  const [scene, setScene] = useState([])\n  useEffect(() => {\n    setScene([{ name: props.scenario.name, message: props.scenario.dialogue }])\n    console.log('updating scene in dialogue from props')\n  }, [props.scenario])\n\n\n\n  const renderScene = () => {\n    return scene.map(({ name, message }, index) => (\n      <div key={index} style={{ height: '20px', width: 'auto'}}>\n        <h3 style={{ paddingTop: '20px', height: 'auto', width: '400px', verticalAlign: 'bottom', marginLeft: 'auto', marginRight: 'auto', fontSize: '1.6em', objectFit: 'contain', textAlign: 'center', fontFamily: 'fantasy', overflow: 'none'}}>\n          {name}\n        </h3>\n        <div className='scrollDiv' >\n        {message}\n        </div>\n      </div>\n    ))\n  }\n\n\n\n  return (\n\n      <div id=\"dialogue-window\" style={{ backgroundImage: 'url(./images/textBox/text2.png)', backgroundSize: '100% 100%', borderRadius: '10px', fontSize: '1.7em', color: 'black', display: 'inline-block', width: '778px', minHeight: '510px', height: 'auto', border: '6px solid black', padding: '5px 10px 10px 10px'}}>\n        {renderScene()}\n      </div>\n\n  )\n}\n\nexport default Dialogue;","/Users/sararussert/codefellows/401/testSpace/gametest/src/components/GameButtons.js",["114"],"import React, { useState, useEffect } from 'react';\nimport Roll from './Roll';\nimport Choice2 from './Choice2';\nimport Choice3 from './Choice3';\nimport Ready from './Ready';\nimport Ready2 from './Ready2';\nimport Choice4 from './Choice4'\nimport Riddle from './Riddle'\nimport Luck from './Luck';\nimport Start from './Start';\nimport Luck3 from './Luck3';\n\n\nlet count = 0;\n\nconst GameButtons = (props) => {\n  const [scenario, setScenario] = useState({})\n  useEffect(() => {\n    setScenario(props.scenario)\n    count++;\n    console.log(count);\n  }, [props])\n  console.log(scenario);\n  switch (scenario.type) {\n    case 'roll':\n      return (\n        <Roll scenario={scenario} />\n      )\n    case 'choice2':\n      return (\n        <Choice2 scenario={scenario} />\n      )\n    case 'choice3':\n      return (\n        <Choice3 scenario={scenario} />\n      )\n    case 'choice4':\n      return (\n        <Choice4 scenario={scenario} />\n      )\n    case 'riddle':\n      return (\n        <Riddle scenario={scenario} />\n      )\n    case 'ready':\n      return (\n        <Ready scenario={scenario} />\n      )\n    case 'ready2':\n      return (\n        <Ready2 scenario={scenario} />\n      )\n    case 'luck':\n      return (\n        <Luck scenario={scenario} />\n      )\n    case 'luck3':\n      return (\n        <Luck3 scenario={scenario} />\n      )\n    case 'none':\n      return (\n        <>\n        </>\n      )\n    default:\n      return (\n        <Start scenario={scenario} />\n      )\n  }\n}\n\nexport default GameButtons\n","/Users/sararussert/codefellows/401/testSpace/gametest/src/components/Choice3.js",[],"/Users/sararussert/codefellows/401/testSpace/gametest/src/components/Roll.js",[],"/Users/sararussert/codefellows/401/testSpace/gametest/src/components/Ready.js",[],"/Users/sararussert/codefellows/401/testSpace/gametest/src/components/Choice4.js",[],"/Users/sararussert/codefellows/401/testSpace/gametest/src/components/Riddle.js",[],"/Users/sararussert/codefellows/401/testSpace/gametest/src/components/Luck3.js",["115"],"import client from './connect.js';\nimport React, {useState} from 'react'\nimport './Luck.css';\nimport './Buttons.css';\n\n\nfunction Luck3(props) {\n  let luckTag = '';\n  const [tails, setTails] = useState('tails')\n  const [heads, setHeads] = useState('heads')\n\n  \n  function tossCoin(){  \n    let count = Math.floor(Math.random() * 5) + 1; \n    if(count == 1){\n        setHeads('animate-tails');\n        setTails('animate-heads');\n        let luck = 0;\n        luckTag = 'You had poor luck';\n        let payload = { luck , scenario: props.scenario }\n        client.emit('luck', payload);\n    }\n    else{\n        setHeads('animate-heads');\n        setTails('animate-tails');\n        let luck = 1; \n        luckTag = 'You had good luck';\n        let payload = { luck , scenario: props.scenario }\n        client.emit('luck', payload);\n      }\n  }\n\n  return (\n    <div>\n      <div className=\"container\">\n        <p>{luckTag}</p>\n      </div>\n      <div id=\"coin\">\n        <div className={heads} style={{backgroundImage: 'url(./images/heads.png)', height: '202px', width: '198px',}}/>\n        <div className={tails} style={{backgroundImage: 'url(./images/tails.png)', height: '202px', width: '198px',}}/>\n      </div>\n        <button onClick={tossCoin} className='choiceButtons'>Toss coin</button>\n    </div>\n  )\n}\n\nexport default Luck3;","/Users/sararussert/codefellows/401/testSpace/gametest/src/components/Start.js",[],"/Users/sararussert/codefellows/401/testSpace/gametest/src/components/Choice2.js",[],"/Users/sararussert/codefellows/401/testSpace/gametest/src/components/Ready2.js",[],"/Users/sararussert/codefellows/401/testSpace/gametest/src/components/Luck.js",[],{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":36,"column":10,"nodeType":"122","messageId":"123","endLine":36,"endColumn":21},{"ruleId":"120","severity":1,"message":"124","line":2,"column":10,"nodeType":"122","messageId":"123","endLine":2,"endColumn":12},{"ruleId":"125","severity":1,"message":"126","line":17,"column":6,"nodeType":"127","endLine":17,"endColumn":133},{"ruleId":"128","severity":1,"message":"129","line":17,"column":124,"nodeType":"130","endLine":17,"endColumn":132},{"ruleId":"120","severity":1,"message":"131","line":13,"column":11,"nodeType":"122","messageId":"123","endLine":13,"endColumn":20},{"ruleId":"120","severity":1,"message":"132","line":20,"column":11,"nodeType":"122","messageId":"123","endLine":20,"endColumn":19},{"ruleId":"120","severity":1,"message":"124","line":2,"column":10,"nodeType":"122","messageId":"123","endLine":2,"endColumn":12},{"ruleId":"120","severity":1,"message":"133","line":2,"column":8,"nodeType":"122","messageId":"123","endLine":2,"endColumn":14},{"ruleId":"120","severity":1,"message":"124","line":2,"column":10,"nodeType":"122","messageId":"123","endLine":2,"endColumn":12},{"ruleId":"120","severity":1,"message":"134","line":10,"column":8,"nodeType":"122","messageId":"123","endLine":10,"endColumn":13},{"ruleId":"135","severity":1,"message":"136","line":15,"column":14,"nodeType":"137","messageId":"138","endLine":15,"endColumn":16},"no-native-reassign",["139"],"no-negated-in-lhs",["140"],"no-unused-vars","'startButton' is assigned a value but never used.","Identifier","unusedVar","'io' is defined but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'styleLoot' is assigned a value but never used.","'styleImg' is assigned a value but never used.","'client' is defined but never used.","'Start' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]